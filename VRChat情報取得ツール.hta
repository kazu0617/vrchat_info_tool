<!--
情報取得ツールVer0.06
製作者:のの @nonogame5656
製作日：2019年5月14日
更新日：2019年5月25日
-->


<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="X-UA-Compatible" content="IE=Edge" charset="utf-8" />
<title>VRChat 情報取得ツールVer0.06</title>
<style type="text/css">
    table { table-layout:fixed }
    td { background-color:#fff1ff }

</style>
<script type="text/javascript">

	var var_info_type 		= "";
	var var_repeat_type 		= "";
	var obj_temp = "";
	
	var obj_friends_online = "";
	var obj_friends_offline = "";
	var obj_friends_ope_1 = "";
	var obj_friends_ope_2 = "";
	var obj_user = "";
	var obj_friends_memo = {};
	
	var obj_world_recent="";
	var obj_world_favorites="";
	var obj_world_active="";
	var obj_world_add=[];
	var obj_world_count={};
	
	var g_apiKey="";
	
	var request_counter=0;
	
	var g_state_pre    = "state_start";
	var g_state_normal = "state_stanby";
	var g_state        = "state_start";
	var var_repeat_start = 0;
	var var_repeat_interval = 0;
	
	var main_loop = function(){
	
	//update_status("g_state_pre："+g_state_pre+"  g_state_normal："+g_state_normal+"  g_state："+g_state);
	
	switch(g_state){
	case "state_start":
		switch(g_state_pre){
		case "state_get_pre_data_1":
			document.getElementById('id_repat_time').innerHTML ="取得中"
			get_APIkey();//'JlE5Jldo5Jibnk5O5hTx6XVqsJu4WJ26'
			break;
		case "state_get_pre_data_2":
			get_World_recent(g_apiKey);
			break;
		case "state_get_pre_data_3":
			get_World_Favorite(g_apiKey);
			break;
		case "state_get_pre_data_4":
			get_World_Active(g_apiKey);
			break;
		case "state_get_pre_end":
			g_state = "state_normal";
			break;
		}
		break;
	case "state_normal":
		switch(g_state_normal){
			case "state_stanby":
			if(var_repeat_interval){
				document.getElementById('id_repat_time').innerHTML = "次の取得まで："+parseInt((var_repeat_interval - (Date.now() - var_reapt_start))/1000)+"秒";
				if((var_repeat_interval - (Date.now() - var_reapt_start))<0){
					update_status("インターバルによる取得:");
					g_state_normal = "state_get_data";
					var_reapt_start = Date.now();
				}
			}else{
				document.getElementById('id_repat_time').innerHTML =""
			}
			break;
		case "state_get_data":
			g_state_normal = "state_wait";
			document.getElementById('id_repat_time').innerHTML ="取得中"
			get_vrchat_info(g_apiKey);
			break;
		case "state_wait":
			if(wait_get_object()){
				g_state_normal = "state_display";
			}
			break;
		case "state_display":
			display_info();
			g_state_normal = "state_stanby";
			break;
		}
		break;
	}
	
	
	};
    	
    //初期設定
    function init(){
        window.resizeTo(1200,1200);
        setInterval(main_loop, 100);
    }
    init();
    
	function get_vrchat_info(apiKey) {
		
		var xhrURL		= "";
		
		switch(var_info_type){
		case "friend_1":
			obj_friends_ope_1 = "";
			get_vrchat_info_friend_1(apiKey);
			break;
		case "friend_2":
			obj_friends_ope_2 = "";
			get_vrchat_info_friend_2(apiKey);
			break;
		case "self_info":
			obj_user = "";
			get_vrchat_info_self_info(apiKey);
			break;
		case "friend_list_online":
			obj_friends_online = "";
			get_vrchat_info_friend_list_online(apiKey);
			break;
		case "friend_list_offline":
			obj_friends_offline = "";
			get_vrchat_info_friend_list_offline(apiKey);
			break;
			
		case "friend_list_all":
			if(obj_friends_ope_1==""){
				get_vrchat_info_friend_1(apiKey);
			}
			if(obj_friends_ope_2==""){
				get_vrchat_info_friend_2(apiKey);
			}
			if(obj_friends_online==""){
				get_vrchat_info_friend_list_online(apiKey);
			}
			if(obj_friends_offline==""){
				get_vrchat_info_friend_list_offline(apiKey);
			}
			if(obj_user==""){
				get_vrchat_info_self_info(apiKey);
			}
			break;
		}
	}
	
    function wait_get_object(){
			switch(var_info_type){
			case "friend_1":		//playermoderated 
				if(obj_friends_ope_1){
					return true;
				}
				break;
			case "friend_2":		//playermoderations
				if(obj_friends_ope_2){
					return true;
				}
				break;
			case "self_info":		
				if(obj_user){
					return true;
				}
				break;
			case "friend_list_online":		
				if(obj_friends_online){
					return true;
				}
				break;
			case "friend_list_offline":	
				if(obj_friends_offline){
					return true;
				}
				break;
			case "friend_list_all":
				if((obj_friends_online != "")&&(obj_friends_offline != "")&&(obj_friends_ope_1 != "")&&(obj_friends_ope_2 != "")&&(obj_user != "")){
					return true;
				}
				break;
			}
    }
    
    function display_info(){
		switch(var_info_type){
		case "friend_1":		//playermoderated 
			display_info_friend(obj_friends_ope_1)
			break;
		case "friend_2":		//playermoderations
			display_info_friend(obj_friends_ope_2)
			break;
		case "self_info":		
			display_info_user(obj_user)
			break;
		case "friend_list_online":		
			display_info_friend_online(obj_friends_online)
			break;
		case "friend_list_offline":	
			display_info_friend_offline(obj_friends_offline)
			break;
		case "friend_list_all":
			display_info_friend_all(obj_user)
			break;
		}
    }
    
	function sort_friend_by_world() {
		
		obj_world_count = {};
		for(var i=0;i<obj_friends_online.length;++i){
		if(!obj_world_count[obj_friends_online[i].location.split(":")[0]]){
			obj_world_count[obj_friends_online[i].location.split(":")[0]] =1;
			}else{
			obj_world_count[obj_friends_online[i].location.split(":")[0]] +=1;
			}
			//update_status("world数："+obj_friends_online[i].location.split(":")[0]+" "+obj_world_count[obj_friends_online[i].location.split(":")[0]]);
		}
		
		update_status("列数："+obj_friends_online.length);
      obj_friends_online = obj_friends_online.sort(function(a, b){
      var x = obj_world_count[a.location.split(":")[0]];
      var y = obj_world_count[b.location.split(":")[0]];
      if (a.location == "private"){return 1};
      if (b.location == "private"){return -1};
      if (x > y) return -1;
      if (x < y) return 1;
      var x = a.location.split(":")[0];
      var y = b.location.split(":")[0];
      if (x > y) return -1;
      if (x < y) return 1;
      var x = a.location.split(":")[1];
      var y = b.location.split(":")[1];
      if (x > y) return -1;
      if (x < y) return 1;
      return 0;
    });
    }
    
	
	function find_world_name_by_id(id) {
		for(var i=0;i<obj_world_recent.length;i++){
			if(obj_world_recent[i].id == id){
				return obj_world_recent[i];
			}
		}
		for(var i=0;i<obj_world_favorites.length;i++){
			if(obj_world_favorites[i].id == id){
				return obj_world_favorites[i];
			}
		}
		for(var i=0;i<obj_world_active.length;i++){
			if(obj_world_active[i].id == id){
				return obj_world_active[i];
			}
		}
		for(var i=0;i<obj_world_add.length;i++){
			if(obj_world_add[i].id == id){
				return obj_world_add[i];
			}
		}
		return {"name":"","thumbnailImageURL":""};
	}
	
	function find_friend_name_by_id(id) {
		for(var i=0;i<obj_friends_ope_2.length;i++){
			if(obj_friends_ope_2[i].targetUserId == id){
				return obj_friends_ope_2[i];
			}
		}
		for(var i=0;i<obj_friends_ope_1.length;i++){
			if(obj_friends_ope_1[i].sourceUserId == id){
				return obj_friends_ope_1[i];
			}
		}
		return {"created":"","type":""};
	}
	function find_name_by_id(id) {
		for(var i=0;i<obj_friends_online.length;i++){
			if(obj_friends_online[i].id == id){
				return obj_friends_online[i];
			}
		}
		for(var i=0;i<obj_friends_offline.length;i++){
			if(obj_friends_offline[i].id == id){
				return obj_friends_offline[i];
			}
		}
		return {"username":"","displayName":""};
	}
	
	function display_info_friend(obj) {
		var result="";
		
		result += "<table><th>日時</th><th>種類</th><th>from</th><th>to</th>"
		for(var i=obj.length-1;i>=0;i--){
		result += "<tr height='10'>"
		result += "<td width='200' align='center'>"
				+obj[i].created+"</td><td width='100' align='center'>"
				+obj[i].type+"</td><td width='200' align='center'>"
				+obj[i].sourceDisplayName+"</td><td width='200' align='center'>"
				+obj[i].targetDisplayName+"</td>";
		result += "</tr>"
		}
		result += "</table>";
		msg_out(result);
		update_status("列数："+obj.length)
	}
	
	
	function display_info_user(obj) {
		var result="";
		
		result += "<table><th>情報</th><th>データ</th>"
		result += "<tr height='10'>"
		result += "<td width='200' align='center'>フレンド数</td><td width='220' align='center'>"+obj.friends.length+"</td>"
		result += "</tr><tr height='10'>"
		result += "<td width='200' align='center'>ID</td><td width='220' align='center'>"+obj.id+"</td>"
		result += "</tr><tr height='10'>"
		result += "<td width='200' align='center'>サムネイル</td><td width='220' align='center'><img src=\""+obj.currentAvatarThumbnailImageUrl+"\" width=\"200\"></td>"
		result += "</tr><tr height='10'>"
		result += "<td width='200' align='center'>username</td><td width='220' align='center'>"+obj.username+"</td>"
		result += "</tr><tr height='10'>"
		result += "<td width='200' align='center'>displayName</td><td width='220' align='center'>"+obj.displayName+"</td>"
		result += "</tr>"
		result += "</table>";
		result += "<br>"
					if(obj.pastDisplayNames.length){
		result += "<table><th>変更日</th><th>過去の表示名</th>"
		result += "<tr height='10'>"
		for(var i=0;i<obj.pastDisplayNames.length;i++){
			result += "<tr height='10'>"
			result += "<td width='200' align='center'>"+obj.pastDisplayNames[i].updated_at+"</td><td width='200' align='center'>"+obj.pastDisplayNames[i].displayName+"</td>"
			result += "</tr>"
		}
		result += "</table>";
		}
		result += "<br>"
		
		result += "<table><th>タグ名一覧</th>"
		result += "<tr height='10'>"
		for(var i=0;i<obj.tags.length;i++){
		result += "<tr height='10'>"
		result += "<td width='100' align='left'>"
				+obj.tags[i]+"</td>"
		result += "</tr>"
		}
		result += "</table>";
		
		
		msg_out(result);
	}
	
	function display_info_friend_online(obj) {
		var result="";
		
		result += "<table><th>NO.</th><th>サムネイル</th><th>表示名<BR>ユーザー名</th><th>場所</th><th>サムネイル</th>"
		for(var i=0;i<obj.length;i++){
		var world_info="";
		if(obj[i].location=="private"){
			world_info = "<td width='500' align='center'><B>PRIVATE</B></td><td width='110' align='center'></td>";
		}
		else{
			world_obj_info = find_world_name_by_id(obj[i].location.split(':')[0]);
			
			if(world_obj_info.name !=""){
				world_info = "<td width='500' align='center'><B>"+world_obj_info.name+"</B><BR> (" +obj[i].location.split('~')[0]+")</td>";
			}else{
				world_info = "<td width='500' align='center'><B>"+"<a href=\"#\" onclick=\"OnGetWorldName("+i+");return false;\">" +"ワールドの名前とサムネイル取得"+"</a></B><BR> (" +obj[i].location.split('~')[0]+")</td>";
			}
			if(world_obj_info.thumbnailImageURL !=""){
				world_info += "<td width='110' align='center'>"+"<img src=\""+world_obj_info.imageUrl+"\" width=\"100\"></td>"
			}else{
				world_info += "<td width='110' align='center'></td>"
			}
		}
		result += "<tr height='30'>"
		
		result += "<td width='30' align='center'>"
				+(i+1)+"</td><td width='110' align='center'>"
				+"<img src=\""+obj[i].currentAvatarThumbnailImageUrl+"\" width=\"100\"></td><td width='200' align='center'><font size='4'><B>"
				+obj[i].displayName+"</B></font><br><br>"
				+obj[i].username+"</td>"
				+world_info//
		result += "</tr>"
		}
		result += "</table>";
		msg_out(result);
		//update_status("列数："+obj.length)

	}
	
	function display_info_friend_offline(obj) {
		var result="";
		
		result += "<table><th>NO.</th><th>サムネイル</th><th>表示名<BR>ユーザー名</th><th>場所</th>"
		result += "<tr height='10'>"
		for(var i=0;i<obj.length;i++){
		result += "<td width='30' align='center'>"
				+(i+1)+"</td><td width='110' align='center'>"
				+"<img src=\""+obj[i].currentAvatarThumbnailImageUrl+"\" width=\"100\"></td><td width='200' align='center'><font size='4'><B>"
				+obj[i].displayName+"</B></font><br><br>"
				+obj[i].username+"</td><td width='200' align='center'>"
				+"offline</td>"//
		result += "</tr>"
		}
		result += "</table>";
		msg_out(result);
		//update_status("列数："+obj.length)
	}
	
	function display_info_friend_all(obj) {
		var result="";
		
		result += "<table><th>NO.</th><th>ID</th><th>サムネイル</th><th>表示名<BR>ユーザー名</th><th>操作種類<BR>操作日付</th><th>交流メモ　　<span id='id_interface_friend_save_button'><input type='file' id='id_load_friend_memo' name='id_load_friend_memo_file' style='display:none'></input><button onclick='load_friend_memo()' style='height:30px;width:100px'>読込</button><button onclick='save_friend_memo()' style='height:30px;width:100px'>保存</button></span></th>"
		for(var i=obj.friends.length-1;i>=0;i--){
			var friend_obj = find_name_by_id(obj.friends[i])
			var friend_ope_obj = find_friend_name_by_id(obj.friends[i])
		result += "<tr height='10'>"
		result += "<td width='30' align='center'>"
				+(i+1)+"</td><td width='100' align='center'>"
				+"<font size=\"2\">"+obj.friends[i]+"</font></td><td width='110' align='center'>"
				+"<img src=\""+friend_obj.currentAvatarThumbnailImageUrl+"\" width=\"100\"></td><td width='200' align='center'><font size='4'><B>"
				+friend_obj.displayName+"</B></font><br><br>"
				+friend_obj.username+"</td><td width='200' align='center'><B>"
				+friend_ope_obj.type+"</B><BR><BR>"
				+friend_ope_obj.created+"</td>"
				+"<td width='200' align='center'><textarea id ="+"id_friend_memo/"+obj.friends[i]+" name ='friend_memo' rows='5' cols='40'>"+""+"</textarea></td>"
		result += "</tr>"
		}
		result += "</table>";
		msg_out(result);
		update_status("列数："+obj.friends.length)
	}
    
	function load_friend_memo(){
		var obj_file_load = document.getElementById('id_load_friend_memo');
		obj_file_load.click();
		
		if(obj_file_load.files[0]==null){
			return false;
		}
		
		//update_status("読込ファイル名："+obj_file_load.files[0])
		var reader = new FileReader();

		reader.onload = function() {
			obj_friends_memo = JSON.parse(reader.result);
			//update_status("LOAD："+reader.result)
			
			for(var key in obj_friends_memo){
				var var_memo 	= document.getElementById('id_friend_memo/'+key);
				if(var_memo != null){
					if(var_memo.value == ""){
						var_memo.value = obj_friends_memo[key].memo;
					}else{
						var_memo.value = var_memo.value+"\n"+obj_friends_memo[key].memo;
					}
				}
			}
		}
		
		reader.readAsText(obj_file_load.files[0], 'UTF-8');
		
	}
	
	function save_friend_memo(){
	
		var var_friend_memo_list 	= document.getElementsByName('friend_memo');

		for(var i=0;i<var_friend_memo_list.length;i++){
			var friend_obj = find_name_by_id(var_friend_memo_list[i].id.split('/')[1])
			obj_friends_memo[var_friend_memo_list[i].id.split('/')[1]] = {"username":friend_obj.username,"displayName":friend_obj.displayName,memo:var_friend_memo_list[i].value};
		}
		
		//update_status(JSON.stringify(obj_friends_memo));
		
		navigator.msSaveOrOpenBlob(new Blob([JSON.stringify(obj_friends_memo)], {type: 'text/plain'}),"vrchat_friends_memo.json");

	}

	function get_vrchat_info_friend_1(apiKey) {
	    var xhr 			= new XMLHttpRequest();

	    var var_user 		= document.getElementById('id_user').value;
	    var var_pass 		= document.getElementById('id_pass').value;
	    var var_output 		= document.getElementById('id_output').value;
	    
		
		//update_status("apiKey："+apiKey);
		//update_status("取得種類："+var_info_type);
		
		var xhrURL		= 'https://api.vrchat.cloud/api/1/auth/user/playermoderated'+ "?apiKey="+apiKey;

		//update_status(xhrURL);
		
		var xhrMethod	= 'GET'

	    var auth_info 	= enc_base64(var_user+":"+var_pass);

	    //update_status("BASE64："+auth_info);
	    
		xhr.onreadystatechange = function(){
			if(this.readyState==4){
				if(xhr.responseText){
		    		//update_status(xhr.responseText);
					var obj = JSON.parse(xhr.responseText);
					obj_friends_ope_1 = obj;
	    		}
			}
		}
		
	    xhr.open( xhrMethod, xhrURL );
	    xhr.setRequestHeader('Authorization', 'Basic '+ auth_info );
	    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
	    //xhr.responseType = 'json';
	    
	    xhr.send();
	   // xhr.abort();

	}
	
	function get_vrchat_info_friend_2(apiKey) {
	    var xhr 			= new XMLHttpRequest();

	    var var_user 		= document.getElementById('id_user').value;
	    var var_pass 		= document.getElementById('id_pass').value;
	    var var_output 		= document.getElementById('id_output').value;
	    
		
		//update_status("apiKey："+apiKey);
		//update_status("取得種類："+var_info_type);
		
		var xhrURL		= 'https://api.vrchat.cloud/api/1/auth/user/playermoderations'+ "?apiKey="+apiKey;

		//update_status(xhrURL);
		
		var xhrMethod	= 'GET'

	    var auth_info 	= enc_base64(var_user+":"+var_pass);

	    //update_status("BASE64："+auth_info);
	    
		xhr.onreadystatechange = function(){
			if(this.readyState==4){
				if(xhr.responseText){
		    		//update_status(xhr.responseText);
					var obj = JSON.parse(xhr.responseText);
					obj_friends_ope_2 = obj;
	    		}
			}

		}
	    
	    xhr.open( xhrMethod, xhrURL );
	    xhr.setRequestHeader('Authorization', 'Basic '+ auth_info );
	    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
	    //xhr.responseType = 'json';
	    
	    xhr.send();
	   // xhr.abort();

	}
	function get_vrchat_info_self_info(apiKey) {
	    var xhr 			= new XMLHttpRequest();

	    var var_user 		= document.getElementById('id_user').value;
	    var var_pass 		= document.getElementById('id_pass').value;
	    var var_output 		= document.getElementById('id_output').value;
	    
		
		//update_status("apiKey："+apiKey);
		//update_status("取得種類："+var_info_type);
		
		var xhrURL		= 'https://api.vrchat.cloud/api/1/auth/user'+ "?apiKey="+apiKey;


		//update_status(xhrURL);
		
		var xhrMethod	= 'GET'

	    var auth_info 	= enc_base64(var_user+":"+var_pass);

	    //update_status("BASE64："+auth_info);
	    
		xhr.onreadystatechange = function(){
			if(this.readyState==4){
				if(xhr.responseText){
		    		//update_status(xhr.responseText);
					obj_user = JSON.parse(xhr.responseText);
	    		}
			}

		}
		
	    
	    xhr.open( xhrMethod, xhrURL );
	    xhr.setRequestHeader('Authorization', 'Basic '+ auth_info );
	    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
	    //xhr.responseType = 'json';
	    
	    xhr.send();
	   // xhr.abort();

	}

	function get_vrchat_info_friend_list_online(apiKey) {
	    var xhr 			= new XMLHttpRequest();

	    var var_user 		= document.getElementById('id_user').value;
	    var var_pass 		= document.getElementById('id_pass').value;
	    var var_output 		= document.getElementById('id_output').value;
	    
		
		//update_status("apiKey："+apiKey);
		//update_status("取得種類："+var_info_type);
		
		var xhrURL		=  'https://api.vrchat.cloud/api/1/auth/user/friends'+ "?apiKey="+apiKey+ "&offset="+(100*request_counter)+ "&offline=false";

		//update_status(xhrURL);
		
		var xhrMethod	= 'GET'

	    var auth_info 	= enc_base64(var_user+":"+var_pass);

	    //update_status("BASE64："+auth_info);
	    
		xhr.onreadystatechange = function(){
			if(this.readyState==4){
				if(xhr.responseText){
		    		//update_status(xhr.responseText);
						var obj = JSON.parse(xhr.responseText);
						if(obj_temp==""){
							obj_temp = obj;
						}else{
							for(var i=0;i<obj.length;i++){
								obj_temp.push(obj[i]);
							}
						}
						if(obj.length==100){
							update_status("リスト取得：＜"+(100*request_counter));
							get_vrchat_info_friend_list_online(apiKey);
						}else{
							obj = obj_temp;
							obj_temp = "";
							obj_friends_online = obj;
							sort_friend_by_world()
							request_counter=0;
						}
	    		}
			}
		}
		
	    
	    xhr.open( xhrMethod, xhrURL );
	    xhr.setRequestHeader('Authorization', 'Basic '+ auth_info );
	    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
	    //xhr.responseType = 'json';
	    
	    xhr.send();
	   // xhr.abort();

	}		
		
		
	function get_vrchat_info_friend_list_offline(apiKey) {
	    var xhr 			= new XMLHttpRequest();

	    var var_user 		= document.getElementById('id_user').value;
	    var var_pass 		= document.getElementById('id_pass').value;
	    var var_output 		= document.getElementById('id_output').value;
	    
		
		//update_status("apiKey："+apiKey);
		//update_status("取得種類："+var_info_type);
		
		var xhrURL		= 'https://api.vrchat.cloud/api/1/auth/user/friends'+ "?apiKey="+apiKey+ "&offset="+(100*request_counter)+ "&offline=true";
		request_counter+=1;


		//update_status(xhrURL);
		
		var xhrMethod	= 'GET'

	    var auth_info 	= enc_base64(var_user+":"+var_pass);

	    //update_status("BASE64："+auth_info);
	    
		xhr.onreadystatechange = function(){
			if(this.readyState==4){
				if(xhr.responseText){
		    		//update_status(xhr.responseText);
						var obj = JSON.parse(xhr.responseText);
						if(obj_temp==""){
							obj_temp = obj;
						}else{
							for(var i=0;i<obj.length;i++){
								obj_temp.push(obj[i]);
							}
						}
						if(obj.length==100){
							update_status("リスト取得：＜"+(100*request_counter));
							get_vrchat_info_friend_list_offline(apiKey);
						}else{
							obj = obj_temp;
							obj_temp = "";
							obj_friends_offline = obj;
							request_counter=0;
						}
	    		}
			}

		}
		
	    
	    xhr.open( xhrMethod, xhrURL );
	    xhr.setRequestHeader('Authorization', 'Basic '+ auth_info );
	    xhr.setRequestHeader("Content-Type", "application/json;charset=UTF-8");
	    //xhr.responseType = 'json';
	    
	    xhr.send();
	   // xhr.abort();

	}
	
	

	function get_APIkey() {

	    var xhr 		= new XMLHttpRequest();
		var xhrURL		= 'https://api.vrchat.cloud/api/1/config'
		var xhrMethod	= 'GET'

		xhr.onreadystatechange = function(){
			if(this.readyState==4){
				if(xhr.responseText){
					var obj = JSON.parse(xhr.responseText);
					g_apiKey = obj.apiKey;
					g_state_pre = "state_get_pre_end";
	    		}
			}
		}
	    
	    xhr.open( xhrMethod, xhrURL );
	    xhr.responseType = "text" ;
	    xhr.send();
	    
	    
	    
	}


	function get_World_recent(apiKey) {

	    var xhr 		= new XMLHttpRequest();
		var xhrURL		= 'https://api.vrchat.cloud/api/1/worlds/recent'+ "?apiKey="+apiKey;
		var xhrMethod	= 'GET'

		xhr.onreadystatechange = function(){
			if(this.readyState==4){
				if(xhr.responseText){
					var obj = JSON.parse(xhr.responseText);
				    obj_world_recent = obj;
				    g_state_pre = "state_get_pre_data_3";
	    		}
			}
		}
	    
	    xhr.open( xhrMethod, xhrURL );
	    xhr.responseType = "text" ;
	    xhr.send();
	    
	}
	
	function get_World_Favorite(apiKey) {

	    var xhr 		= new XMLHttpRequest();
		var xhrURL		= 'https://api.vrchat.cloud/api/1/worlds/favorites'+ "?apiKey="+apiKey;
		var xhrMethod	= 'GET'

		xhr.onreadystatechange = function(){
			if(this.readyState==4){
				if(xhr.responseText){
					var obj = JSON.parse(xhr.responseText);
				    obj_world_favorites = obj;
				    g_state_pre = "state_get_pre_data_4";
	    		}
			}
		}
	    
	    xhr.open( xhrMethod, xhrURL );
	    xhr.responseType = "text" ;
	    xhr.send();
	    
	}
	function get_World_Active(apiKey) {

	    var xhr 		= new XMLHttpRequest();
		var xhrURL		= 'https://api.vrchat.cloud/api/1/worlds/favorites'+ "?apiKey="+apiKey;
		var xhrMethod	= 'GET'

		xhr.onreadystatechange = function(){
			if(this.readyState==4){
				if(xhr.responseText){
					var obj = JSON.parse(xhr.responseText);
				    obj_world_active = obj;
				    g_state_pre = "state_get_pre_end";
	    		}
			}
		}
	    
	    xhr.open( xhrMethod, xhrURL );
	    xhr.responseType = "text" ;
	    xhr.send();
	    
	}
	function OnGetWorldName(no) {

	    var xhr 		= new XMLHttpRequest();
		var xhrURL		= 'https://api.vrchat.cloud/api/1/worlds/'+obj_friends_online[no].location.split(":")[0]+ "?apiKey="+g_apiKey;
		var xhrMethod	= 'GET'
		//update_status("URL："+xhrURL);
		xhr.onreadystatechange = function(){
			if(this.readyState==4){
				if(xhr.responseText){
					var obj = JSON.parse(xhr.responseText);
				    obj_world_add.push(obj);
				    g_state_normal = "state_display";
	    		}
			}
		}
	    
	    xhr.open( xhrMethod, xhrURL );
	    xhr.responseType = "text" ;
	    xhr.send();
	    
	}
	function stop_repeat() {
		document.getElementById('id_interface_button').innerHTML = "<button onclick=\"get_information()\" style=\"height:30px;width:100px\">取得</button>";
		document.getElementById('id_repat_time').innerHTML =""
		var_repeat_interval =  0;
	}
	
	function get_information() {
	
	    if(document.getElementById('id_user').value == ""){
	    	update_status("<font color='blue'>ユーザー名を入力してください</font>")
	    	return false;
	    }
	    if(document.getElementById('id_pass').value == ""){
	    	update_status("<font color='blue'>パスワードを入力してください</font>")
	    	return false;
	    }
	    
		var var_info_type_list 	= document.getElementsByName('info_type');

	    for(var i=0;i<var_info_type_list.length;i++){
	    	if(var_info_type_list[i].checked){
	    		var_info_type = var_info_type_list[i].value;
	    		break;
	    	}
	    }
		var var_repeat_type_list 	= document.getElementsByName('repeat_type');

	    for(var i=0;i<var_repeat_type_list.length;i++){
	    	if(var_repeat_type_list[i].checked){
	    		var_repeat_type = var_repeat_type_list[i].value;
	    		break;
	    	}
	    }
	    
		switch(var_repeat_type){
		case "1min_repeat":
			var_repeat_interval =   60000;
			
			break;
		case "3min_repeat":
			var_repeat_interval =  180000;
			break;
		case "5min_repeat":
			var_repeat_interval =  300000;
			break;
		case "10min_repeat":
			var_repeat_interval =  600000;
			break;
		case "30min_repeat":
			var_repeat_interval = 1800000;
			break;
		case "no_repat":
			var_repeat_interval = 0;
		break;
		}
		
		var_reapt_start = Date.now();
	    
	    if(var_repeat_type == "no_repeat"){
	    	document.getElementById('id_interface_button').innerHTML = "<button onclick=\"get_information()\" style=\"height:30px;width:100px\">取得</button>";
	    }else{
	    	document.getElementById('id_interface_button').innerHTML = "　　　　　　　　　　　<button onclick=\"stop_repeat()\" style=\"height:30px;width:100px\">停止</button>";
	    }
	    
	    if(g_state == "state_start"){
			g_state_pre = "state_get_pre_data_1";
		}
		if(g_state_normal == "state_stanby"){
			g_state_normal = "state_get_data";
		}
	}

	function enc_base64(source_moji) {

		var map_base64 = [	'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 
							'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 
							'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 
							'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 
							'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 
							'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 
							'w', 'x', 'y', 'z', '0', '1', '2', '3', 
							'4', '5', '6', '7', '8', '9', '+', '/'];
							
		var enc_moji = ""
		
		if(source_moji.length % 3){
			source_moji+=String.fromCharCode(0x00);
		}
		
	    for (  var i = 0;  i < source_moji.length; i++   ) {
			var moji = "";
		    switch((i+1)%3){
		    case 1:
			    moji = (source_moji.charCodeAt(i) & 0xFC) >> 2;
				enc_moji += map_base64[(moji & 0x3F)];
			    break;
		    case 2:
			    moji = ((source_moji.charCodeAt(i-1) & 0x03) << 4) | ((source_moji.charCodeAt(i) & 0xF0) >> 4);
				enc_moji += map_base64[(moji & 0x3F)];
				break;
		    case 0:
			    moji = ((source_moji.charCodeAt(i-1) & 0x0F) << 2) | ((source_moji.charCodeAt(i) & 0xC0) >> 6);
				enc_moji += map_base64[(moji & 0x3F)];
				
			    if(source_moji.charCodeAt(i) == 0x00){break;}
			    moji = ((source_moji.charCodeAt(i) & 0x3F));
				enc_moji += map_base64[(moji & 0x3F)];
				break;
			}
		}

	    switch(enc_moji.length%4){
	    case 1:
		    enc_moji += "===";
		    break;
	    case 2:
		    enc_moji += "==";
			break;
	    case 3:
		    enc_moji += "=";
			break;
		}

		return enc_moji;

	}
	function msg_out(message) {
		document.getElementById('id_output_data').innerHTML = message;
	}
	function update_status(message) {
		document.getElementById('id_status').innerHTML = message + "<br>" + document.getElementById('id_status').innerHTML;
	}
</script>

</head>
	<body>
	<div id="id_header">
		■□■□　VRChat 情報取得ツールVer0.06　□■□■
	</div>
	
	<BR>
	
	<div id="id_interface">■入力：
		ユーザー名：<input id="id_user">
		　パスワード：<input id="id_pass" type="password"><BR><BR>
		　
		　種類：
		　　<input type="radio"  name="info_type" value="self_info">[0]ユーザー情報<BR>
		　	<input type="radio"  name="info_type" value="friend_list_online" checked>[A]フレンド一覧(オンライン)　
		　	<input type="radio"  name="info_type" value="friend_1">[C]フレンド操作＜相手から＞<br>
		　	<input type="radio"  name="info_type" value="friend_list_offline">[B]フレンド一覧(オフライン)　
		　	<input type="radio"  name="info_type" value="friend_2">[D]フレンド操作＜自分から＞
		　	<input type="radio"  name="info_type" value="friend_list_all">[E]フレンド履歴　<BR><BR>
		　　※[A],[B],[E]は、ユーザー数が多いと時間がかかります。
		<!--出力ファイル名：<input id="id_output" value="output.txt">-->
		<BR><BR>
		　取得インターバル：
		　　<input type="radio"  name="repeat_type" value="no_repeat" checked>一回だけ
		　	<input type="radio"  name="repeat_type" value="1min_repeat" >１分おき　
		　	<input type="radio"  name="repeat_type" value="3min_repeat" >３分おき　
		　	<input type="radio"  name="repeat_type" value="5min_repeat" >５分おき　
		　	<input type="radio"  name="repeat_type" value="10min_repeat" >10分おき　
		　	<input type="radio"  name="repeat_type" value="30min_repeat" >30分おき　
		<BR><BR>
		<span id="id_interface_button"><button onclick="get_information()" style="height:30px;width:100px">取得</button></span>　　<span id="id_repat_time"></span>
	</div>
	
	<BR><BR>
	
	<div id="id_output">■取得情報：
		<div id="id_output_data">　未取得</div>
	</div>
	<br>
	<br>
	<div id="id_console">■取得ログ：
		<div id="id_status"></div>
	</div>


	</body>
</html>